[{"C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\redux\\redux-store.ts":"1","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\components\\list.tsx":"2","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\components\\item.tsx":"3","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\API\\api.ts":"4","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\reportWebVitals.ts":"5","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\components\\container\\item-container.tsx":"6","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\index.tsx":"7","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\App.tsx":"8","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\redux\\task.ts":"9"},{"size":675,"mtime":1611759887092,"results":"10","hashOfConfig":"11"},{"size":2219,"mtime":1611826548809,"results":"12","hashOfConfig":"11"},{"size":2056,"mtime":1611827082874,"results":"13","hashOfConfig":"11"},{"size":763,"mtime":1611821916990,"results":"14","hashOfConfig":"11"},{"size":425,"mtime":1611754530652,"results":"15","hashOfConfig":"11"},{"size":1114,"mtime":1611821916899,"results":"16","hashOfConfig":"11"},{"size":632,"mtime":1611754530654,"results":"17","hashOfConfig":"11"},{"size":172,"mtime":1611754530652,"results":"18","hashOfConfig":"11"},{"size":1383,"mtime":1611827047056,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"r1eu5a",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"23"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\redux\\redux-store.ts",["42"],"import { Action, applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk, { ThunkAction } from \"redux-thunk\";\nimport taskReducer from \"./task\";\n\nconst rootReducer = combineReducers({\n  task: taskReducer,\n});\n\nexport type InferActionsTypes<T> = T extends {\n  [keys: string]: (...args: any[]) => infer U;\n}\n  ? U\n  : never;\nexport type BaseThunkType<\n  A extends Action = Action,\n  R = Promise<void>\n  // eslint-disable-next-line prettier/prettier\n  > = ThunkAction<R, AppStateType, unknown, A>;\ntype RootReducer = typeof rootReducer;\nexport type AppStateType = ReturnType<RootReducer>;\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n",["43"],"C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\components\\list.tsx",[],"C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\components\\item.tsx",[],"C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\API\\api.ts",[],"C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\reportWebVitals.ts",["44"],"import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\components\\container\\item-container.tsx",["45"],"/* eslint-disable react/prop-types */\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { getTask, removeTask, taskType, updateTask } from \"../../redux/task\";\nimport Item from \"../item\";\n\ninterface MapStateType {\n  tasks: Array<taskType>;\n}\ninterface MapDispatchType {\n  getTask: () => any;\n  removeTask: (id: number) => void;\n  updateTask: (id: number) => void;\n}\n\nconst ItemContainer: React.FC<MapStateType & MapDispatchType> = (props) => {\n  const [task, setTask] = useState(null);\n  if (task == null) {\n    setTask(props.getTask());\n  }\n  const Component = props.tasks.map((item) => (\n    <Item\n      id={item.id}\n      text={item.text}\n      removeTask={props.removeTask}\n      getTask={props.getTask}\n      key={item.id}\n      updateTask={props.updateTask}\n    />\n  ));\n  return <div>{Component}</div>;\n};\nconst mapStateToProps = (state: AppStateType) => {\n  return {\n    tasks: state.task.task,\n  };\n};\nexport default connect(mapStateToProps, { getTask, removeTask, updateTask })(\n  ItemContainer\n);\n","C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\index.tsx",[],"C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\App.tsx",[],"C:\\Users\\medok\\Desktop\\coding\\framework team\\tasks-list\\src\\redux\\task.ts",["46"],{"ruleId":"47","severity":1,"message":"48","line":10,"column":29,"nodeType":"49","messageId":"50","endLine":10,"endColumn":32,"suggestions":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":3,"column":25,"nodeType":"56","messageId":"57","endLine":3,"endColumn":57},{"ruleId":"47","severity":1,"message":"48","line":12,"column":18,"nodeType":"49","messageId":"50","endLine":12,"endColumn":21,"suggestions":"58"},{"ruleId":"54","severity":1,"message":"55","line":30,"column":12,"nodeType":"56","messageId":"57","endLine":30,"endColumn":39},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["59","60"],"valid-jsdoc",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",["61","62"],{"messageId":"63","fix":"64","desc":"65"},{"messageId":"66","fix":"67","desc":"68"},{"messageId":"63","fix":"69","desc":"65"},{"messageId":"66","fix":"70","desc":"68"},"suggestUnknown",{"range":"71","text":"72"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"71","text":"73"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"74","text":"72"},{"range":"74","text":"73"},[303,306],"unknown","never",[379,382]]